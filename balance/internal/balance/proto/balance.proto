// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/balance.proto

/**
* Balance microservice.
*
* Microservice for working with the user balance.
* It handles and stores billing data.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package balanceService;
option go_package = ".;protobalance";

/**
 * Represents the user balance
 */
message Balance {
  string user_id = 1; /// Unique user ID(UUID v4).
  string currency = 2; /// Currency type. Three capital letters are used. Ex. RUB, USD etc.
  uint64 amount = 3; /// Change user balance. A negative number means a decrease in the user's balance.
  google.protobuf.Timestamp updated_at = 4; /// Time of processing.
}

/**
 * Represents create user balance request.
 */
message CreateBalanceRequest {
  Balance balance = 1; ///
}

/**
 * Represents create user balance response.
 */
message CreateBalanceResponse {
  string user_id = 1; /// Unique user ID(UUID v4).
}

/**
 * Represents user balance request.
 */
message GetBalanceRequest {
  string user_id = 1; /// Unique user ID(UUID v4).
  string currency = 2; /// Currency type. Three capital letters are used. Ex. RUB, USD etc.
}

/**
 * Represents user balance response.
 */
message GetBalanceResponse {
  Balance balance = 1; /// User balance response.
}

service balanceService {
  /// Create new users balance.
  rpc CreateBalance(CreateBalanceRequest) returns (CreateBalanceResponse);
  /// Used to check your balance.
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
}
