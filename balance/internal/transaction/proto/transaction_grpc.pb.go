// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prototransaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceServiceClient is the client API for BalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceServiceClient interface {
	/// Used for crediting or debiting funds from the user's account.
	CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	/// Used to view the history of transactions
	GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (BalanceService_GetTransactionsClient, error)
}

type balanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceServiceClient(cc grpc.ClientConnInterface) BalanceServiceClient {
	return &balanceServiceClient{cc}
}

func (c *balanceServiceClient) CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionService.balanceService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (BalanceService_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BalanceService_ServiceDesc.Streams[0], "/transactionService.balanceService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &balanceServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BalanceService_GetTransactionsClient interface {
	Recv() (*TransactionsResponse, error)
	grpc.ClientStream
}

type balanceServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *balanceServiceGetTransactionsClient) Recv() (*TransactionsResponse, error) {
	m := new(TransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BalanceServiceServer is the server API for BalanceService service.
// All implementations must embed UnimplementedBalanceServiceServer
// for forward compatibility
type BalanceServiceServer interface {
	/// Used for crediting or debiting funds from the user's account.
	CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	/// Used to view the history of transactions
	GetTransactions(*TransactionsRequest, BalanceService_GetTransactionsServer) error
	mustEmbedUnimplementedBalanceServiceServer()
}

// UnimplementedBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBalanceServiceServer struct {
}

func (UnimplementedBalanceServiceServer) CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedBalanceServiceServer) GetTransactions(*TransactionsRequest, BalanceService_GetTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedBalanceServiceServer) mustEmbedUnimplementedBalanceServiceServer() {}

// UnsafeBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServiceServer will
// result in compilation errors.
type UnsafeBalanceServiceServer interface {
	mustEmbedUnimplementedBalanceServiceServer()
}

func RegisterBalanceServiceServer(s grpc.ServiceRegistrar, srv BalanceServiceServer) {
	s.RegisterService(&BalanceService_ServiceDesc, srv)
}

func _BalanceService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionService.balanceService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).CreateTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BalanceServiceServer).GetTransactions(m, &balanceServiceGetTransactionsServer{stream})
}

type BalanceService_GetTransactionsServer interface {
	Send(*TransactionsResponse) error
	grpc.ServerStream
}

type balanceServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *balanceServiceGetTransactionsServer) Send(m *TransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BalanceService_ServiceDesc is the grpc.ServiceDesc for BalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactionService.balanceService",
	HandlerType: (*BalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _BalanceService_CreateTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _BalanceService_GetTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/transaction.proto",
}
